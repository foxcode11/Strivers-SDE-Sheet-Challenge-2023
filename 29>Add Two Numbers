/**
 * Definition of linked list:
 *
 * class Node {
 * public:
 *      int data;
 *      Node *next;
 *      Node() {
 *          this->data = 0;
 *          this->next = NULL;
 *      }
 *      Node(int data) {
 *          this->data = data;
 *          this->next = NULL;
 *      }
 *      Node (int data, Node *next) {
 *          this->data = data;
 *          this->next = next;
 *      }
 * };
 *
 *************************************************************************/

Node *addTwoNumbers(Node *l1, Node *l2)
{
        Node* head=new Node();
        Node* temp=head;
        int carry=0;
        while(l1!=NULL&&l2!=NULL)
        {
            int sum=l1->data+l2->data+carry;
            Node* newNode=new Node();
            if(sum>=10)
            {
                 newNode->data=sum%10;
                carry=1;
            }
            else
            {
               newNode->data=sum;
                carry=0;
            }
            temp->next=newNode;
            temp=temp->next;
            l1=l1->next;
            l2=l2->next;
        }
        while(l1!=NULL)
        {
            int sum=l1->data+carry;
            Node* newNode=new Node();
            if(sum>=10)
            {
                 newNode->data=sum%10;
                carry=1;
            }
            else
            {
               newNode->data=sum;
                carry=0;
            }
            temp->next=newNode;
            temp=temp->next;
            l1=l1->next;
        }
        while(l2!=NULL)
        {
            int sum=l2->data+carry;
            Node* newNode=new Node();
            if(sum>=10)
            {
                 newNode->data=sum%10;
                carry=1;
            }
            else
            {
               newNode->data=sum;
                carry=0;
            }
            temp->next=newNode;
            temp=temp->next;
            l2=l2->next;
        }
        if(carry==1)
        {
            Node* newNode=new Node();
            newNode->data=1;
            newNode->next=NULL;
            temp->next=newNode;
        }
        return head->next;
}
