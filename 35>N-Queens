 #include<bits/stdc++.h>
 bool isSafe(vector<vector<int>>&board,int r,int c,int n)
    {
         for(int i=0;i<c;i++)
        {
            if(board[r][i]==1)
                return false;
        }
        // checking in row
        for(int i=0;i<r;i++)
        {
            if(board[i][c]==1)
                return false;
        }
        //right  diagonal
        for(int i=r-1,j=c+1;i>=0&&j<n;i--,j++)
            if(board[i][j]==1)
                return false;
        // left diagonal
        for(int i=r-1,j=c-1;i>=0&&j>=0;i--,j--)
            if(board[i][j]==1)
                return false;
                
        return true;
    }
    void queen(vector<vector<int>>& ans,vector<vector<int>> &board,int r,int n)
    {
        if(r==n)
        {
            vector<int>temp;
            for(int i=0;i<n;i++)
            {
                for(int j=0;j<n;j++)
                {
                    temp.emplace_back(board[i][j]);
                }
            }
            ans.emplace_back(temp);
            return;
        }
        for(int c=0;c<n;c++)
        {
            if(isSafe(board,r,c,n))
            {
                board[r][c]=1;
                queen(ans,board,r+1,n);
                board[r][c]=0;   
            }     
        }
    }

vector<vector<int>> solveNQueens(int n) 
{
        vector<vector<int>>ans;
        vector<vector<int>>board(n,vector<int>(n,0));
        queen(ans,board,0,n);
        return ans;
}
