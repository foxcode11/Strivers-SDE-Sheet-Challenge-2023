#include <bits/stdc++.h> 

int merge(long long *arr, vector<long long>&temp,int l,int m,int r)
{
    int i,j,k,count = 0;
    i = l;
    j = m; 
    k = l; 
    while((i<=m-1)&&(j<=r)) 
    {
        if (arr[i]<= arr[j]) 
        {
            temp[k++]=arr[i++];
        }
        else 
        {
            temp[k++]=arr[j++];
            count=count+(m-i);
        }
    }
    while (i<=m-1)
        temp[k++]=arr[i++];
    while(j<=r)
        temp[k++]=arr[j++];
    for (i=l;i<=r;i++)
        arr[i]=temp[i];
return count;
}
int mergeSort(long long *arr,vector<long long>&temp,int l,int r)
{
    int m,count = 0;
    if (r>l){
        m=(r+l)/2;
        count += mergeSort(arr,temp,l,m);
        count += mergeSort(arr,temp,m+1,r);
        count += merge(arr,temp,l,m+1,r);
    }
    return count;
}
long long getInversions(long long *arr, int n)
{
    vector<long long>temp(n);
    return mergeSort(arr,temp,0,n-1);
}
